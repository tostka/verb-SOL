# verb-SOL.psm1


<#
.SYNOPSIS
verb-SOL - Skype-Online-related functions
.NOTES
Version     : 1.0.2.0
Author      : Todd Kadrie
Website     :	https://www.toddomation.com
Twitter     :	@tostka
CreatedDate : 4/8/2020
FileName    : verb-SOL.psm1
License     : MIT
Copyright   : (c) 4/8/2020 Todd Kadrie
Github      : https://github.com/tostka
AddedCredit : REFERENCE
AddedWebsite:	REFERENCEURL
AddedTwitter:	@HANDLE / http://twitter.com/HANDLE
REVISIONS
* 4/8/2020 - 1.0.0.0
# 11:38 AM 12/30/2019 ran vsc alias-expan
* 10:55 AM 12/6/2019 Connect-SOL: added suffix to TitleBar tag for non-TOR tenants, also config'd a central tab vari
* 5:14 PM 11/27/2019 repl $MFA code with get-TenantMFARequirement
* 1:07 PM 11/25/2019 added *tol/*tor/*cmw alias variants for connect & reconnect
* 10:00 AM 11/20/2019 added  doc for credential param. rsol already had credential support
* 10:21 AM 6/20/2019 finally got up to full function, added showdebug to rsol & csol
* 3:10 PM 6/19/2019 fixed?
* 1:02 PM 11/7/2018 added Disconnect-PssBroken
.DESCRIPTION
verb-SOL - Skype-Online-related functions
.LINK
https://github.com/tostka/verb-SOL
#>


$script:ModuleRoot = $PSScriptRoot ;
$script:ModuleVersion = (Import-PowerShellDataFile -Path (get-childitem $script:moduleroot\*.psd1).fullname).moduleversion ;

#*======v FUNCTIONS v======



#*------v Connect-SOL.ps1 v------
Function Connect-SOL {
    <#
    .SYNOPSIS
    Connect-SOL - Establish PSS to https://ps.outlook.com/powershell/
    .NOTES
    Author: : Todd Kadrie
    Website:	http://toddomation.com
    Twitter:	http://twitter.com/tostka
    Based on 'overlapping functions' concept by: ExactMike Perficient, Global Knowl... (Partner)
    Website:	https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    REVISIONS   :
    * 10:03 AM 5/12/2020 updated cred to $credO365TORSID
    * 10:55 AM 12/6/2019 Connect-SOL: added suffix to TitleBar tag for non-TOR tenants, also config'd a central tab vari
    * 5:14 PM 11/27/2019 repl $MFA code with get-TenantMFARequirement
    * 1:07 PM 11/25/2019 added *tol/*tor/*cmw alias variants for connect & reconnect
    * 2:45 PM 4/18/2018 port cxo to cSOL
    .DESCRIPTION
    .PARAMETER  ProxyEnabled
    Use Proxy-Aware SessionOption settings [-ProxyEnabled]
    .PARAMETER  CommandPrefix
    [noun]-PREFIX[command] PREFIX string for clearly marking cmdlets sourced in this connection [-CommandPrefix SOLlab ]
    .PARAMETER  Credential
    Credential to use for this connection [-credential 'ADMINUPN@DOMAIN.COM']
    .INPUTS
    None. Does not accepted piped input.
    .OUTPUTS
    None. Returns no objects or output.
    .EXAMPLE
    connect-SOL
    Connect using defaults, and leverage any pre-set $global:o365cred variable
    .EXAMPLE
    connect-SOL -CommandPrefix SOL -credential (Get-Credential -credential s-todd.kadrie@torolab.com)  ;
    Connect an explicit credential, and use 'SOLlab' as the cmdlet prefix
    .LINK
    https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    *---^ END Comment-based Help  ^--- #>

    Param(
        [Parameter(HelpMessage="Force domain autodiscovery to connect to SOL (necessary with Skype Hybrid on-prem)[-OverrideAdminDomain TENANT.onmicrosoft.com]")]
        [string]$OverrideAdminDomain = $TORMeta['o365_TenantDomain'],
        [Parameter(HelpMessage="[noun]-PREFIX[command] PREFIX string for clearly marking cmdlets sourced in this connection [-CommandPrefix SOLlab]")]
        [string]$CommandPrefix = 'SOL',
        [Parameter(HelpMessage="Credential to use for this connection [-credential 'ADMINUPN@DOMAIN.COM']")]
        [System.Management.Automation.PSCredential]$Credential = $credO365TORSID,
        [Parameter(HelpMessage="Debugging Flag [-showDebug]")]
        [switch] $showDebug
    ) ;
    # disable prefix spec, unless actually blanked (e.g. centrally spec'd in profile).
    if(!$CommandPrefix){ $CommandPrefix='SOL' ; } ;

    # pulling the $MFA auto by splitting the credential and checking the o365_*_OPDomain & o365_$($credVariTag)_MFA global varis
    $MFA = get-TenantMFARequirement -Credential $Credential ;

    $sTitleBarTag="SOL" ;
    
    # use credential domain to determine target org
    $rgxLegacyLogon = '\w*\\\w*' ; 
    if($Credential.username -match $rgxLegacyLogon){
        $credDom =$Credential.username.split('\')[0] ; 
        switch ($credDom){
            "$($TORMeta['legacyDomain'])" {
                # leave untagged
            }
            "$($TOLMeta['legacyDomain'])" {
                $sTitleBarTag = $sTitleBarTag + "TOL"
            }
            "$CMWMeta['legacyDomain'])" {
                $sTitleBarTag = $sTitleBarTag + "CMW"
            }
        } ; 
    } elseif ($Credential.username.contains('@')){
        $credDom = ($Credential.username.split("@"))[1] ;
        switch ($credDom){
            "$($TORMeta['o365_OPDomain'])" {
                # leave untagged
            }
            "$($TOLMeta['o365_OPDomain'])" {
                $sTitleBarTag = $sTitleBarTag + "TOL"
            }
            "$CMWMeta['o365_OPDomain'])" {
                $sTitleBarTag = $sTitleBarTag + "CMW"
            }
        } ; 
    } else {
        write-warning "$((get-date).ToString('HH:mm:ss')):UNRECOGNIZED CREDENTIAL!:$($Credential.Username)`nUNABLE TO RESOLVE DEFAULT EX10SERVER FOR CONNECTION!" ;
    }

#*------^ Connect-SOL.ps1 ^------

#*------v csolcmw.ps1 v------
function csolcmw {Connect-SOL -cred $credO365CMWCSID}

#*------^ csolcmw.ps1 ^------

#*------v csoltol.ps1 v------
function csoltol {Connect-SOL -cred $credO365TOLSID}

#*------^ csoltol.ps1 ^------

#*------v csoltor.ps1 v------
function csoltor {Connect-SOL -cred $credO365TORSID}

#*------^ csoltor.ps1 ^------

#*------v Disconnect-SOL.ps1 v------
Function Disconnect-SOL {
    <#
    .SYNOPSIS
    Disconnect-SOL - Disconnects any PSS to https://ps.outlook.com/powershell/ (cleans up session after a batch or other temp work is done)
    .NOTES
    Updated By: Todd Kadrie
    Website:	http://toddomation.com
    Twitter:	http://twitter.com/tostka
    Based on original function Author:  ExactMike Perficient, Global Knowl... (Partner)
    Website:	https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    REVISIONS   :
    # 10:25 AM 6/20/2019 switched to common $rgxSOLPsHostName
    # 8:47 AM 6/2/2017 cleaned up deadwood, simplified pshelp
    * 8:49 AM 3/15/2017 Disconnect-SOL: add Remove-PSTitleBar 'SOL' to clean up on disconnect
    * 7:58 AM 3/15/2017 ren Disconnect/Connect/Reconnect-SOL => Disconnect/Connect/Reconnect-SOL
    * 7:48 AM 3/15/2017 added pss, doing tweaks to put into prod use
    * 2/10/14 posted version
    .DESCRIPTION
    I use this to smoothly cleanup connections.
    Mike's original notes:
    The function Disconnect-SOL gets used within batches.  Below is one
    example of how I batch items for processing and use the
    Disconnect-SOL function.
    .INPUTS
    None. Does not accepted piped input.
    .OUTPUTS
    None. Returns no objects or output.
    .EXAMPLE
    Disconnect-SOL;
    .LINK
    https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    *---^ END Comment-based Help  ^--- #>
    # 9:25 AM 3/21/2017 getting undefined on the below, pretest them
    if($Global:SOLModule){$Global:SOLModule | Remove-Module -Force ; } ;
    if($Global:SOLSession){$Global:SOLSession | Remove-PSSession ; } ;
    Get-PSSession|Where-Object{$_.ComputerName -match $rgxSOLPsHostName} | Remove-PSSession ;
    Remove-PSTitlebar 'SOL' ;
}

#*------^ Disconnect-SOL.ps1 ^------

#*------v Reconnect-SOL.ps1 v------
Function Reconnect-SOL {
    <#
    .SYNOPSIS
    Reconnect-SOL - Test and reestablish connection to SkypeForBusinessOnline @ admin0a.online.lync.com
    .NOTES
    Updated By: : Todd Kadrie
    Website:	http://toddomation.com
    Twitter:	@tostka http://twitter.com/tostka
    Based on original function Author: ExactMike Perficient, Global Knowl... (Partner)
    Website:	https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    REVISIONS   :
    * 1:07 PM 11/25/2019 added *tol/*tor/*cmw alias variants for connect & reconnect
    * 10:00 AM 11/20/2019 added  doc for credential param
    * 9:51 AM 6/20/2019 init
    .DESCRIPTION
    I use this for routine test/reconnect of SOL. His orig use was within batches, to break up and requeue chunks of commands.
    Mike's original comment: Below is one
    example of how I batch items for processing and use the
    Reconnect-SOL function.  I'm still experimenting with how to best
    batch items and you can see here I'm using a combination of larger batches for
    Write-Progress and actually handling each individual item within the
    foreach-object script block.  I was driven to this because disconnections
    happen so often/so unpredictably in my current customer's environment:

    #-=-=Batch sample-=-=-=-=-=-=
    $batchsize = 10 ;
    $RecordCount=$mr.count  ;
    $b=0  ;
    $mrs = @() ;
    do {
        Write-Progress -Activity "Getting move request statistics for all $wave move requests." -Status "Processing Records $b through $($b+$batchsize) of $RecordCount." -PercentComplete ($b/$RecordCount*100) ;
        $mrs += $mr | Select-Object -skip $b -first $batchsize | foreach-object {Reconnect-SOL; $_ | Get-SOMETHING} ;
        $b=$b+$batchsize ;
        } ;
    until ($b -gt $RecordCount) ;
    #-=-=-=-=-=-=-=-=
    .PARAMETER  Credential
    Credential to use for this connection [-credential 'ADMINUPN@DOMAIN.COM']
    .INPUTS
    None. Does not accepted piped input.
    .OUTPUTS
    None. Returns no objects or output.
    .EXAMPLE
    Reconnect-SOL;
    .LINK
    https://social.technet.microsoft.com/Forums/msonline/en-US/f3292898-9b8c-482a-86f0-3caccc0bd3e5/exchange-powershell-monitoring-remote-sessions?forum=onlineservicesexchange
    #>

    Param(
        [Parameter(HelpMessage="Credential to use for this connection [-credential [credential obj variable]")]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(HelpMessage="Debugging Flag [-showDebug]")]
        [switch] $showDebug
    ) ;

    # fault tolerant looping SOL connect, don't let it exit until a connection is present, and stable, or return error for hard time out
    $tryNo=0 ;
    Do {
        $tryNo++ ;
        write-host "." -NoNewLine; if($tryNo -gt 1){Start-Sleep -m (1000 * 5)} ;
        <# 9:57 AM 6/20/2019 +[XXXX]::[PS]:C:\u\w\e\scripts$ $SOLSession | format-list *
            State                  : Opened
            ComputerType           : RemoteMachine
            ComputerName           : admin0a.online.lync.com
            ConfigurationName      : Microsoft.PowerShell
            Name                   : Session1
            Availability           : Available
            ApplicationPrivateData : {SessionInfo, PSVersionTable}
            Runspace               : System.Management.Automation.RemoteRunspace
        #>
        if (($SOLSession.state -ne 'Opened' -AND $SOLSession.Availability -ne 'Available') -or !$SOLSession) {
            if($showdebug){ write-host -foregroundcolor yellow "$((get-date).ToString('HH:mm:ss')):Connecting:`$SOLSession invalid state:$(($SOLSession| Format-Table -a State,Availability |out-string).trim())" } ;
            Disconnect-SOL; Disconnect-PssBroken ;Start-Sleep -Seconds 3;
            if(!$Credential){
                Connect-SOL ;
            } else {
                Connect-SOL -Credential $Credential ;
            } ;
        } ;
        if( !(Get-PSSession|Where-Object{($_.ComputerName -match $rgxSOLPsHostName) -AND ($_.State -eq 'Opened') -AND ($_.Availability -eq 'Available')}) ){
            if($showdebug){ write-host -foregroundcolor yellow "$((get-date).ToString('HH:mm:ss')):Reconnecting:No existing PSSESSION matching $($rgxSOLPsHostName) with valid Open/Availability:$((Get-PSSession|Where-Object{$_.ComputerName -match $rgxSOLPsHostName}| Format-Table -a State,Availability |out-string).trim())" } ;
            if(!$Credential){
                Reconnect-SOL ;
            } else {
                Reconnect-SOL -credential $Credential ;
            } ;
        }  ;
        if($tryNo -gt $DoRetries ){throw "RETRIED SOL CONNECT $($tryNo) TIMES, ABORTING!" } ;
    } Until ((Get-PSSession |Where-Object{$_.ComputerName -match $rgxSOLPsHostName -AND $_.State -eq "Opened" -AND $_.Availability -eq "Available"}))
}

#*------^ Reconnect-SOL.ps1 ^------

#*------v rsolcmw.ps1 v------
function rsolcmw {Reconnect-SOL -cred $credO365CMWCSID}

#*------^ rsolcmw.ps1 ^------

#*------v rsoltol.ps1 v------
function rsoltol {Reconnect-SOL -cred $credO365TOLSID}

#*------^ rsoltol.ps1 ^------

#*------v rsoltor.ps1 v------
function rsoltor {Reconnect-SOL -cred $credO365TORSID}

#*------^ rsoltor.ps1 ^------

#*======^ END FUNCTIONS ^======

Export-ModuleMember -Function Connect-SOL,csolcmw,csoltol,csoltor,Disconnect-SOL,Reconnect-SOL,rsolcmw,rsoltol,rsoltor -Alias *


# SIG # Begin signature block
# MIIELgYJKoZIhvcNAQcCoIIEHzCCBBsCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUneF7Vb0pC7yuhiSUWFpanLnd
# ZUGgggI4MIICNDCCAaGgAwIBAgIQWsnStFUuSIVNR8uhNSlE6TAJBgUrDgMCHQUA
# MCwxKjAoBgNVBAMTIVBvd2VyU2hlbGwgTG9jYWwgQ2VydGlmaWNhdGUgUm9vdDAe
# Fw0xNDEyMjkxNzA3MzNaFw0zOTEyMzEyMzU5NTlaMBUxEzARBgNVBAMTClRvZGRT
# ZWxmSUkwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALqRVt7uNweTkZZ+16QG
# a+NnFYNRPPa8Bnm071ohGe27jNWKPVUbDfd0OY2sqCBQCEFVb5pqcIECRRnlhN5H
# +EEJmm2x9AU0uS7IHxHeUo8fkW4vm49adkat5gAoOZOwbuNntBOAJy9LCyNs4F1I
# KKphP3TyDwe8XqsEVwB2m9FPAgMBAAGjdjB0MBMGA1UdJQQMMAoGCCsGAQUFBwMD
# MF0GA1UdAQRWMFSAEL95r+Rh65kgqZl+tgchMuKhLjAsMSowKAYDVQQDEyFQb3dl
# clNoZWxsIExvY2FsIENlcnRpZmljYXRlIFJvb3SCEGwiXbeZNci7Rxiz/r43gVsw
# CQYFKw4DAh0FAAOBgQB6ECSnXHUs7/bCr6Z556K6IDJNWsccjcV89fHA/zKMX0w0
# 6NefCtxas/QHUA9mS87HRHLzKjFqweA3BnQ5lr5mPDlho8U90Nvtpj58G9I5SPUg
# CspNr5jEHOL5EdJFBIv3zI2jQ8TPbFGC0Cz72+4oYzSxWpftNX41MmEsZkMaADGC
# AWAwggFcAgEBMEAwLDEqMCgGA1UEAxMhUG93ZXJTaGVsbCBMb2NhbCBDZXJ0aWZp
# Y2F0ZSBSb290AhBaydK0VS5IhU1Hy6E1KUTpMAkGBSsOAwIaBQCgeDAYBgorBgEE
# AYI3AgEMMQowCKACgAChAoAAMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
# CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBTsEOmM
# PSXSDqzB3xddRjfkwjeEYjANBgkqhkiG9w0BAQEFAASBgJznDVJUwZioEt6MpzMe
# 5FLn1RrZYNAYDnWsAee8VHgMiFLj4QwGw4yeWmRWV4XFNBYStgyuiOVVJNon626r
# J/3dGjdanzTC2HOd78/U5Z7h4sg07gOgIhWqJVspazaNKBCP1DzUV9mTuCBOtF+i
# VJ0L+cWLSd8UwOVbBpVuTEMF
# SIG # End signature block
